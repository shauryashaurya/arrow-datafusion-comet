+---------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|name                       |details                                                                                                                                                                                                              |
+---------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|!                          |{PASSED, [{SELECT ! true;, OK}]}                                                                                                                                                                                     |
|%                          |{PASSED, [{SELECT 2 % 1.8;, OK}]}                                                                                                                                                                                    |
|&                          |{PASSED, [{SELECT 3 & 5;, OK}]}                                                                                                                                                                                      |
|*                          |{PASSED, [{SELECT 2 * 3;, OK}]}                                                                                                                                                                                      |
|+                          |{PASSED, [{SELECT 1 + 2;, OK}]}                                                                                                                                                                                      |
|-                          |{PASSED, [{SELECT 2 - 1;, OK}]}                                                                                                                                                                                      |
|/                          |{PASSED, [{SELECT 3 / 2;, OK}]}                                                                                                                                                                                      |
|<                          |{PASSED, [{SELECT 1 < 2;, OK}]}                                                                                                                                                                                      |
|<=                         |{PASSED, [{SELECT 2 <= 2;, OK}]}                                                                                                                                                                                     |
|<=>                        |{PASSED, [{SELECT 2 <=> 2;, OK}]}                                                                                                                                                                                    |
|=                          |{PASSED, [{SELECT 2 = 2;, OK}]}                                                                                                                                                                                      |
|==                         |{PASSED, [{SELECT 2 == 2;, OK}]}                                                                                                                                                                                     |
|>                          |{PASSED, [{SELECT 2 > 1;, OK}]}                                                                                                                                                                                      |
|>=                         |{PASSED, [{SELECT 2 >= 1;, OK}]}                                                                                                                                                                                     |
|^                          |{PASSED, [{SELECT 3 ^ 5;, OK}]}                                                                                                                                                                                      |
|abs                        |{PASSED, [{SELECT abs(-1);, OK}]}                                                                                                                                                                                    |
|acos                       |{PASSED, [{SELECT acos(1);, OK}]}                                                                                                                                                                                    |
|acosh                      |{FAILED, [{SELECT acosh(1);, Unsupported}]}                                                                                                                                                                          |
|add_months                 |{FAILED, [{SELECT add_months('2016-08-31', 1);, Unsupported}]}                                                                                                                                                       |
|aes_decrypt                |{FAILED, [{SELECT aes_decrypt(unhex('83F16B2AA704794132802D248E6BFD4E380078182D1544813898AC97E709B28A94'), '0000111122223333');, Unsupported}]}                                                                      |
|aes_encrypt                |{FAILED, [{SELECT hex(aes_encrypt('Spark', '0000111122223333'));, Unsupported}]}                                                                                                                                     |
|aggregate                  |{FAILED, [{SELECT aggregate(array(1, 2, 3), 0, (acc, x) -> acc + x);, Unsupported}]}                                                                                                                                 |
|and                        |{PASSED, [{SELECT true and true;, OK}]}                                                                                                                                                                              |
|any                        |{FAILED, [{SELECT any(col) FROM VALUES (true), (false), (false) AS tab(col);, Unsupported}]}                                                                                                                         |
|any_value                  |{FAILED, [{SELECT any_value(col) FROM VALUES (10), (5), (20) AS tab(col);, Unsupported}]}                                                                                                                            |
|approx_count_distinct      |{FAILED, [{SELECT approx_count_distinct(col1) FROM VALUES (1), (1), (2), (2), (3) tab(col1);, Unsupported}]}                                                                                                         |
|approx_percentile          |{FAILED, [{SELECT approx_percentile(col, array(0.5, 0.4, 0.1), 100) FROM VALUES (0), (1), (2), (10) AS tab(col);, Unsupported}]}                                                                                     |
|array                      |{FAILED, [{SELECT array(1, 2, 3);, Unsupported}]}                                                                                                                                                                    |
|array_agg                  |{FAILED, [{SELECT array_agg(col) FROM VALUES (1), (2), (1) AS tab(col);, Unsupported}]}                                                                                                                              |
|array_append               |{FAILED, [{SELECT array_append(array('b', 'd', 'c', 'a'), 'd');, Unsupported}]}                                                                                                                                      |
|array_compact              |{FAILED, [{SELECT array_compact(array(1, 2, 3, null));, Unsupported}]}                                                                                                                                               |
|array_contains             |{FAILED, [{SELECT array_contains(array(1, 2, 3), 2);, Unsupported}]}                                                                                                                                                 |
|array_distinct             |{FAILED, [{SELECT array_distinct(array(1, 2, 3, null, 3));, Unsupported}]}                                                                                                                                           |
|array_except               |{FAILED, [{SELECT array_except(array(1, 2, 3), array(1, 3, 5));, Unsupported}]}                                                                                                                                      |
|array_insert               |{FAILED, [{SELECT array_insert(array(1, 2, 3, 4), 5, 5);, Unsupported}]}                                                                                                                                             |
|array_intersect            |{FAILED, [{SELECT array_intersect(array(1, 2, 3), array(1, 3, 5));, Unsupported}]}                                                                                                                                   |
|array_join                 |{FAILED, [{SELECT array_join(array('hello', 'world'), ' ');, Unsupported}]}                                                                                                                                          |
|array_max                  |{FAILED, [{SELECT array_max(array(1, 20, null, 3));, Unsupported}]}                                                                                                                                                  |
|array_min                  |{FAILED, [{SELECT array_min(array(1, 20, null, 3));, Unsupported}]}                                                                                                                                                  |
|array_position             |{FAILED, [{SELECT array_position(array(3, 2, 1), 1);, Unsupported}]}                                                                                                                                                 |
|array_remove               |{FAILED, [{SELECT array_remove(array(1, 2, 3, null, 3), 3);, Unsupported}]}                                                                                                                                          |
|array_repeat               |{FAILED, [{SELECT array_repeat('123', 2);, Unsupported}]}                                                                                                                                                            |
|array_size                 |{FAILED, [{SELECT array_size(array('b', 'd', 'c', 'a'));, Unsupported}]}                                                                                                                                             |
|array_sort                 |{FAILED, [{SELECT array_sort(array(5, 6, 1), (left, right) -> case when left < right then -1 when left > right then 1 else 0 end);, Unsupported}]}                                                                   |
|array_union                |{FAILED, [{SELECT array_union(array(1, 2, 3), array(1, 3, 5));, Unsupported}]}                                                                                                                                       |
|arrays_overlap             |{FAILED, [{SELECT arrays_overlap(array(1, 2, 3), array(3, 4, 5));, Unsupported}]}                                                                                                                                    |
|arrays_zip                 |{FAILED, [{SELECT arrays_zip(array(1, 2, 3), array(2, 3, 4));, Unsupported}]}                                                                                                                                        |
|ascii                      |{PASSED, [{SELECT ascii('222');, OK}]}                                                                                                                                                                               |
|asin                       |{PASSED, [{SELECT asin(0);, OK}]}                                                                                                                                                                                    |
|asinh                      |{FAILED, [{SELECT asinh(0);, Unsupported}]}                                                                                                                                                                          |
|assert_true                |{FAILED, [{SELECT assert_true(0 < 1);, Unsupported}]}                                                                                                                                                                |
|atan                       |{PASSED, [{SELECT atan(0);, OK}]}                                                                                                                                                                                    |
|atan2                      |{PASSED, [{SELECT atan2(0, 0);, OK}]}                                                                                                                                                                                |
|atanh                      |{FAILED, [{SELECT atanh(0);, Unsupported}]}                                                                                                                                                                          |
|avg                        |{FAILED, [{SELECT avg(col) FROM VALUES (1), (2), (3) AS tab(col);, Unsupported}]}                                                                                                                                    |
|base64                     |{FAILED, [{SELECT base64('Spark SQL');, Unsupported}]}                                                                                                                                                               |
|bigint                     |{SKIPPED, [{, No examples found in spark.sessionState.functionRegistry}]}                                                                                                                                            |
|bin                        |{FAILED, [{SELECT bin(13);, Unsupported}]}                                                                                                                                                                           |
|binary                     |{SKIPPED, [{, No examples found in spark.sessionState.functionRegistry}]}                                                                                                                                            |
|bit_and                    |{FAILED, [{SELECT bit_and(col) FROM VALUES (3), (5) AS tab(col);, Unsupported}]}                                                                                                                                     |
|bit_count                  |{FAILED, [{SELECT bit_count(0);, Unsupported}]}                                                                                                                                                                      |
|bit_get                    |{FAILED, [{SELECT bit_get(11, 0);, Unsupported}]}                                                                                                                                                                    |
|bit_length                 |{PASSED, [{SELECT bit_length('Spark SQL');, OK}]}                                                                                                                                                                    |
|bit_or                     |{FAILED, [{SELECT bit_or(col) FROM VALUES (3), (5) AS tab(col);, Unsupported}]}                                                                                                                                      |
|bit_xor                    |{FAILED, [{SELECT bit_xor(col) FROM VALUES (3), (5) AS tab(col);, Unsupported}]}                                                                                                                                     |
|bool_and                   |{FAILED, [{SELECT bool_and(col) FROM VALUES (true), (true), (true) AS tab(col);, Unsupported}]}                                                                                                                      |
|bool_or                    |{FAILED, [{SELECT bool_or(col) FROM VALUES (true), (false), (false) AS tab(col);, Unsupported}]}                                                                                                                     |
|boolean                    |{SKIPPED, [{, No examples found in spark.sessionState.functionRegistry}]}                                                                                                                                            |
|bround                     |{FAILED, [{SELECT bround(2.5, 0);, Unsupported}]}                                                                                                                                                                    |
|btrim                      |{PASSED, [{SELECT btrim('    SparkSQL   ');, OK}]}                                                                                                                                                                   |
|cardinality                |{FAILED, [{SELECT cardinality(array('b', 'd', 'c', 'a'));, Unsupported}]}                                                                                                                                            |
|cast                       |{PASSED, [{SELECT cast('10' as int);, OK}]}                                                                                                                                                                          |
|cbrt                       |{FAILED, [{SELECT cbrt(27.0);, Unsupported}]}                                                                                                                                                                        |
|ceil                       |{PASSED, [{SELECT ceil(-0.1);, OK}]}                                                                                                                                                                                 |
|ceiling                    |{PASSED, [{SELECT ceiling(-0.1);, OK}]}                                                                                                                                                                              |
|char                       |{PASSED, [{SELECT char(65);, OK}]}                                                                                                                                                                                   |
|char_length                |{PASSED, [{SELECT char_length('Spark SQL ');, OK}]}                                                                                                                                                                  |
|character_length           |{PASSED, [{SELECT character_length('Spark SQL ');, OK}]}                                                                                                                                                             |
|chr                        |{PASSED, [{SELECT chr(65);, OK}]}                                                                                                                                                                                    |
|coalesce                   |{PASSED, [{SELECT coalesce(NULL, 1, NULL);, OK}]}                                                                                                                                                                    |
|collect_list               |{FAILED, [{SELECT collect_list(col) FROM VALUES (1), (2), (1) AS tab(col);, Unsupported}]}                                                                                                                           |
|collect_set                |{FAILED, [{SELECT collect_set(col) FROM VALUES (1), (2), (1) AS tab(col);, Unsupported}]}                                                                                                                            |
|concat                     |{FAILED, [{SELECT concat('Spark', 'SQL');, Unsupported}]}                                                                                                                                                            |
|concat_ws                  |{PASSED, [{SELECT concat_ws(' ', 'Spark', 'SQL');, OK}]}                                                                                                                                                             |
|contains                   |{FAILED, [{SELECT contains('Spark SQL', 'Spark');, Failed on native side}]}                                                                                                                                          |
|conv                       |{FAILED, [{SELECT conv('100', 2, 10);, Unsupported}]}                                                                                                                                                                |
|convert_timezone           |{FAILED, [{SELECT convert_timezone('Europe/Brussels', 'America/Los_Angeles', timestamp_ntz'2021-12-06 00:00:00');, Unsupported}]}                                                                                    |
|corr                       |{FAILED, [{SELECT corr(c1, c2) FROM VALUES (3, 2), (3, 3), (6, 4) as tab(c1, c2);, Unsupported}]}                                                                                                                    |
|cos                        |{PASSED, [{SELECT cos(0);, OK}]}                                                                                                                                                                                     |
|cosh                       |{FAILED, [{SELECT cosh(0);, Unsupported}]}                                                                                                                                                                           |
|cot                        |{FAILED, [{SELECT cot(1);, Unsupported}]}                                                                                                                                                                            |
|count                      |{FAILED, [{SELECT count(*) FROM VALUES (NULL), (5), (5), (20) AS tab(col);, Unsupported}]}                                                                                                                           |
|count_if                   |{FAILED, [{SELECT count_if(col % 2 = 0) FROM VALUES (NULL), (0), (1), (2), (3) AS tab(col);, Unsupported}]}                                                                                                          |
|count_min_sketch           |{FAILED, [{SELECT hex(count_min_sketch(col, 0.5d, 0.5d, 1)) FROM VALUES (1), (2), (1) AS tab(col);, Unsupported}]}                                                                                                   |
|covar_pop                  |{FAILED, [{SELECT covar_pop(c1, c2) FROM VALUES (1,1), (2,2), (3,3) AS tab(c1, c2);, Unsupported}]}                                                                                                                  |
|covar_samp                 |{FAILED, [{SELECT covar_samp(c1, c2) FROM VALUES (1,1), (2,2), (3,3) AS tab(c1, c2);, Unsupported}]}                                                                                                                 |
|crc32                      |{FAILED, [{SELECT crc32('Spark');, Unsupported}]}                                                                                                                                                                    |
|csc                        |{FAILED, [{SELECT csc(1);, Unsupported}]}                                                                                                                                                                            |
|cume_dist                  |{FAILED, [{SELECT a, b, cume_dist() OVER (PARTITION BY a ORDER BY b) FROM VALUES ('A1', 2), ('A1', 1), ('A2', 3), ('A1', 1) tab(a, b);, Unsupported}]}                                                               |
|curdate                    |{PASSED, [{SELECT curdate();, OK}]}                                                                                                                                                                                  |
|current_catalog            |{PASSED, [{SELECT current_catalog();, OK}]}                                                                                                                                                                          |
|current_database           |{PASSED, [{SELECT current_database();, OK}]}                                                                                                                                                                         |
|current_date               |{PASSED, [{SELECT current_date();, OK}]}                                                                                                                                                                             |
|current_schema             |{PASSED, [{SELECT current_schema();, OK}]}                                                                                                                                                                           |
|current_timestamp          |{FAILED, [{SELECT current_timestamp();, Failed on something else. Check query manually}]}                                                                                                                            |
|current_timezone           |{PASSED, [{SELECT current_timezone();, OK}]}                                                                                                                                                                         |
|current_user               |{PASSED, [{SELECT current_user();, OK}]}                                                                                                                                                                             |
|date                       |{SKIPPED, [{, No examples found in spark.sessionState.functionRegistry}]}                                                                                                                                            |
|date_add                   |{FAILED, [{SELECT date_add('2016-07-30', 1);, Unsupported}]}                                                                                                                                                         |
|date_diff                  |{FAILED, [{SELECT date_diff('2009-07-31', '2009-07-30');, Unsupported}]}                                                                                                                                             |
|date_format                |{FAILED, [{SELECT date_format('2016-04-08', 'y');, Unsupported}]}                                                                                                                                                    |
|date_from_unix_date        |{FAILED, [{SELECT date_from_unix_date(1);, Unsupported}]}                                                                                                                                                            |
|date_part                  |{PASSED, [{SELECT date_part('YEAR', TIMESTAMP '2019-08-12 01:00:00.123456');, OK}]}                                                                                                                                  |
|date_sub                   |{FAILED, [{SELECT date_sub('2016-07-30', 1);, Unsupported}]}                                                                                                                                                         |
|date_trunc                 |{FAILED, [{SELECT date_trunc('YEAR', '2015-03-05T09:32:05.359');, Failed on native side}]}                                                                                                                           |
|dateadd                    |{FAILED, [{SELECT dateadd('2016-07-30', 1);, Unsupported}]}                                                                                                                                                          |
|datediff                   |{FAILED, [{SELECT datediff('2009-07-31', '2009-07-30');, Unsupported}]}                                                                                                                                              |
|datepart                   |{PASSED, [{SELECT datepart('YEAR', TIMESTAMP '2019-08-12 01:00:00.123456');, OK}]}                                                                                                                                   |
|day                        |{FAILED, [{SELECT day('2009-07-30');, Unsupported}]}                                                                                                                                                                 |
|dayofmonth                 |{FAILED, [{SELECT dayofmonth('2009-07-30');, Unsupported}]}                                                                                                                                                          |
|dayofweek                  |{FAILED, [{SELECT dayofweek('2009-07-30');, Unsupported}]}                                                                                                                                                           |
|dayofyear                  |{FAILED, [{SELECT dayofyear('2016-04-09');, Unsupported}]}                                                                                                                                                           |
|decimal                    |{SKIPPED, [{, No examples found in spark.sessionState.functionRegistry}]}                                                                                                                                            |
|decode                     |{FAILED, [{SELECT decode(encode('abc', 'utf-8'), 'utf-8');, Unsupported}]}                                                                                                                                           |
|degrees                    |{FAILED, [{SELECT degrees(3.141592653589793);, Unsupported}]}                                                                                                                                                        |
|dense_rank                 |{FAILED, [{SELECT a, b, dense_rank(b) OVER (PARTITION BY a ORDER BY b) FROM VALUES ('A1', 2), ('A1', 1), ('A2', 3), ('A1', 1) tab(a, b);, Unsupported}]}                                                             |
|div                        |{FAILED, [{SELECT 3 div 2;, Unsupported}]}                                                                                                                                                                           |
|double                     |{SKIPPED, [{, No examples found in spark.sessionState.functionRegistry}]}                                                                                                                                            |
|e                          |{FAILED, [{SELECT e();, Unsupported}]}                                                                                                                                                                               |
|element_at                 |{FAILED, [{SELECT element_at(array(1, 2, 3), 2);, Unsupported}]}                                                                                                                                                     |
|elt                        |{FAILED, [{SELECT elt(1, 'scala', 'java');, Unsupported}]}                                                                                                                                                           |
|encode                     |{FAILED, [{SELECT encode('abc', 'utf-8');, Unsupported}]}                                                                                                                                                            |
|endswith                   |{FAILED, [{SELECT endswith('Spark SQL', 'SQL');, Failed on native side}]}                                                                                                                                            |
|equal_null                 |{PASSED, [{SELECT equal_null(3, 3);, OK}]}                                                                                                                                                                           |
|every                      |{FAILED, [{SELECT every(col) FROM VALUES (true), (true), (true) AS tab(col);, Unsupported}]}                                                                                                                         |
|exists                     |{FAILED, [{SELECT exists(array(1, 2, 3), x -> x % 2 == 0);, Unsupported}]}                                                                                                                                           |
|exp                        |{PASSED, [{SELECT exp(0);, OK}]}                                                                                                                                                                                     |
|explode                    |{FAILED, [{SELECT explode(array(10, 20));, Unsupported}]}                                                                                                                                                            |
|explode_outer              |{FAILED, [{SELECT explode_outer(array(10, 20));, Unsupported}]}                                                                                                                                                      |
|expm1                      |{FAILED, [{SELECT expm1(0);, Unsupported}]}                                                                                                                                                                          |
|extract                    |{PASSED, [{SELECT extract(YEAR FROM TIMESTAMP '2019-08-12 01:00:00.123456');, OK}]}                                                                                                                                  |
|factorial                  |{FAILED, [{SELECT factorial(5);, Unsupported}]}                                                                                                                                                                      |
|filter                     |{FAILED, [{SELECT filter(array(1, 2, 3), x -> x % 2 == 1);, Unsupported}]}                                                                                                                                           |
|find_in_set                |{FAILED, [{SELECT find_in_set('ab','abc,b,ab,c,def');, Unsupported}]}                                                                                                                                                |
|first                      |{FAILED, [{SELECT first(col) FROM VALUES (10), (5), (20) AS tab(col);, Unsupported}]}                                                                                                                                |
|first_value                |{FAILED, [{SELECT first_value(col) FROM VALUES (10), (5), (20) AS tab(col);, Unsupported}]}                                                                                                                          |
|flatten                    |{FAILED, [{SELECT flatten(array(array(1, 2), array(3, 4)));, Unsupported}]}                                                                                                                                          |
|float                      |{SKIPPED, [{, No examples found in spark.sessionState.functionRegistry}]}                                                                                                                                            |
|floor                      |{PASSED, [{SELECT floor(-0.1);, OK}]}                                                                                                                                                                                |
|forall                     |{FAILED, [{SELECT forall(array(1, 2, 3), x -> x % 2 == 0);, Unsupported}]}                                                                                                                                           |
|format_number              |{FAILED, [{SELECT format_number(12332.123456, 4);, Unsupported}]}                                                                                                                                                    |
|format_string              |{FAILED, [{SELECT format_string("Hello World %d %s", 100, "days");, Unsupported}]}                                                                                                                                   |
|from_csv                   |{FAILED, [{SELECT from_csv('1, 0.8', 'a INT, b DOUBLE');, Unsupported}]}                                                                                                                                             |
|from_json                  |{FAILED, [{SELECT from_json('{"a":1, "b":0.8}', 'a INT, b DOUBLE');, Unsupported}]}                                                                                                                                  |
|from_unixtime              |{FAILED, [{SELECT from_unixtime(0, 'yyyy-MM-dd HH:mm:ss');, Unsupported}]}                                                                                                                                           |
|from_utc_timestamp         |{FAILED, [{SELECT from_utc_timestamp('2016-08-31', 'Asia/Seoul');, Unsupported}]}                                                                                                                                    |
|get                        |{PASSED, [{SELECT get(array(1, 2, 3), 0);, OK}]}                                                                                                                                                                     |
|get_json_object            |{FAILED, [{SELECT get_json_object('{"a":"b"}', '$.a');, Unsupported}]}                                                                                                                                               |
|getbit                     |{FAILED, [{SELECT getbit(11, 0);, Unsupported}]}                                                                                                                                                                     |
|greatest                   |{FAILED, [{SELECT greatest(10, 9, 2, 4, 3);, Unsupported}]}                                                                                                                                                          |
|grouping                   |{FAILED, [{SELECT name, grouping(name), sum(age) FROM VALUES (2, 'Alice'), (5, 'Bob') people(age, name) GROUP BY cube(name);, Failed on something else. Check query manually}]}                                      |
|grouping_id                |{FAILED, [{SELECT name, grouping_id(), sum(age), avg(height) FROM VALUES (2, 'Alice', 165), (5, 'Bob', 180) people(age, name, height) GROUP BY cube(name, height);, Failed on something else. Check query manually}]}|
|hash                       |{FAILED, [{SELECT hash('Spark', array(123), 2);, Unsupported}]}                                                                                                                                                      |
|hex                        |{FAILED, [{SELECT hex(17);, Unsupported}]}                                                                                                                                                                           |
|histogram_numeric          |{FAILED, [{SELECT histogram_numeric(col, 5) FROM VALUES (0), (1), (2), (10) AS tab(col);, Unsupported}]}                                                                                                             |
|hour                       |{FAILED, [{SELECT hour('2009-07-30 12:58:59');, Failed on native side}]}                                                                                                                                             |
|hypot                      |{FAILED, [{SELECT hypot(3, 4);, Unsupported}]}                                                                                                                                                                       |
|if                         |{PASSED, [{SELECT if(1 < 2, 'a', 'b');, OK}]}                                                                                                                                                                        |
|ifnull                     |{FAILED, [{SELECT ifnull(NULL, array('2'));, Unsupported}]}                                                                                                                                                          |
|ilike                      |{FAILED, [{SELECT ilike('Spark', '_Park');, Failed on native side}]}                                                                                                                                                 |
|in                         |{PASSED, [{SELECT 1 in(1, 2, 3);, OK}]}                                                                                                                                                                              |
|initcap                    |{PASSED, [{SELECT initcap('sPark sql');, OK}]}                                                                                                                                                                       |
|inline                     |{FAILED, [{SELECT inline(array(struct(1, 'a'), struct(2, 'b')));, Unsupported}]}                                                                                                                                     |
|inline_outer               |{FAILED, [{SELECT inline_outer(array(struct(1, 'a'), struct(2, 'b')));, Unsupported}]}                                                                                                                               |
|input_file_block_length    |{FAILED, [{SELECT input_file_block_length();, Unsupported}]}                                                                                                                                                         |
|input_file_block_start     |{FAILED, [{SELECT input_file_block_start();, Unsupported}]}                                                                                                                                                          |
|input_file_name            |{FAILED, [{SELECT input_file_name();, Unsupported}]}                                                                                                                                                                 |
|instr                      |{PASSED, [{SELECT instr('SparkSQL', 'SQL');, OK}]}                                                                                                                                                                   |
|int                        |{SKIPPED, [{, No examples found in spark.sessionState.functionRegistry}]}                                                                                                                                            |
|isnan                      |{FAILED, [{SELECT isnan(cast('NaN' as double));, Unsupported}]}                                                                                                                                                      |
|isnotnull                  |{PASSED, [{SELECT isnotnull(1);, OK}]}                                                                                                                                                                               |
|isnull                     |{PASSED, [{SELECT isnull(1);, OK}]}                                                                                                                                                                                  |
|java_method                |{FAILED, [{SELECT java_method('java.util.UUID', 'randomUUID');, Unsupported}]}                                                                                                                                       |
|json_array_length          |{FAILED, [{SELECT json_array_length('[1,2,3,4]');, Unsupported}]}                                                                                                                                                    |
|json_object_keys           |{FAILED, [{SELECT json_object_keys('{}');, Unsupported}]}                                                                                                                                                            |
|json_tuple                 |{FAILED, [{SELECT json_tuple('{"a":1, "b":2}', 'a', 'b');, Unsupported}]}                                                                                                                                            |
|kurtosis                   |{FAILED, [{SELECT kurtosis(col) FROM VALUES (-10), (-20), (100), (1000) AS tab(col);, Unsupported}]}                                                                                                                 |
|lag                        |{FAILED, [{SELECT a, b, lag(b) OVER (PARTITION BY a ORDER BY b) FROM VALUES ('A1', 2), ('A1', 1), ('A2', 3), ('A1', 1) tab(a, b);, Unsupported}]}                                                                    |
|last                       |{FAILED, [{SELECT last(col) FROM VALUES (10), (5), (20) AS tab(col);, Unsupported}]}                                                                                                                                 |
|last_day                   |{FAILED, [{SELECT last_day('2009-01-12');, Unsupported}]}                                                                                                                                                            |
|last_value                 |{FAILED, [{SELECT last_value(col) FROM VALUES (10), (5), (20) AS tab(col);, Unsupported}]}                                                                                                                           |
|lcase                      |{PASSED, [{SELECT lcase('SparkSql');, OK}]}                                                                                                                                                                          |
|lead                       |{FAILED, [{SELECT a, b, lead(b) OVER (PARTITION BY a ORDER BY b) FROM VALUES ('A1', 2), ('A1', 1), ('A2', 3), ('A1', 1) tab(a, b);, Unsupported}]}                                                                   |
|least                      |{FAILED, [{SELECT least(10, 9, 2, 4, 3);, Unsupported}]}                                                                                                                                                             |
|left                       |{FAILED, [{SELECT left('Spark SQL', 3);, Failed on native side}]}                                                                                                                                                    |
|len                        |{PASSED, [{SELECT len('Spark SQL ');, OK}]}                                                                                                                                                                          |
|length                     |{PASSED, [{SELECT length('Spark SQL ');, OK}]}                                                                                                                                                                       |
|levenshtein                |{FAILED, [{SELECT levenshtein('kitten', 'sitting');, Unsupported}]}                                                                                                                                                  |
|like                       |{FAILED, [{SELECT like('Spark', '_park');, Failed on native side}]}                                                                                                                                                  |
|ln                         |{PASSED, [{SELECT ln(1);, OK}]}                                                                                                                                                                                      |
|localtimestamp             |{FAILED, [{SELECT localtimestamp();, Failed on native side}]}                                                                                                                                                        |
|locate                     |{FAILED, [{SELECT locate('bar', 'foobarbar');, Unsupported}]}                                                                                                                                                        |
|log                        |{FAILED, [{SELECT log(10, 100);, Unsupported}]}                                                                                                                                                                      |
|log10                      |{PASSED, [{SELECT log10(10);, OK}]}                                                                                                                                                                                  |
|log1p                      |{FAILED, [{SELECT log1p(0);, Unsupported}]}                                                                                                                                                                          |
|log2                       |{PASSED, [{SELECT log2(2);, OK}]}                                                                                                                                                                                    |
|lower                      |{PASSED, [{SELECT lower('SparkSql');, OK}]}                                                                                                                                                                          |
|lpad                       |{FAILED, [{SELECT lpad('hi', 5, '??');, Unsupported}]}                                                                                                                                                               |
|ltrim                      |{PASSED, [{SELECT ltrim('    SparkSQL   ');, OK}]}                                                                                                                                                                   |
|make_date                  |{FAILED, [{SELECT make_date(2013, 7, 15);, Unsupported}]}                                                                                                                                                            |
|make_dt_interval           |{FAILED, [{SELECT make_dt_interval(1, 12, 30, 01.001001);, Unsupported}]}                                                                                                                                            |
|make_interval              |{FAILED, [{SELECT make_interval(100, 11, 1, 1, 12, 30, 01.001001);, Unsupported}]}                                                                                                                                   |
|make_timestamp             |{FAILED, [{SELECT make_timestamp(2014, 12, 28, 6, 30, 45.887);, Unsupported}]}                                                                                                                                       |
|make_timestamp_ltz         |{FAILED, [{SELECT make_timestamp_ltz(2014, 12, 28, 6, 30, 45.887);, Unsupported}]}                                                                                                                                   |
|make_timestamp_ntz         |{FAILED, [{SELECT make_timestamp_ntz(2014, 12, 28, 6, 30, 45.887);, Unsupported}]}                                                                                                                                   |
|make_ym_interval           |{FAILED, [{SELECT make_ym_interval(1, 2);, Unsupported}]}                                                                                                                                                            |
|map                        |{FAILED, [{SELECT map(1.0, '2', 3.0, '4');, Unsupported}]}                                                                                                                                                           |
|map_concat                 |{FAILED, [{SELECT map_concat(map(1, 'a', 2, 'b'), map(3, 'c'));, Unsupported}]}                                                                                                                                      |
|map_contains_key           |{FAILED, [{SELECT map_contains_key(map(1, 'a', 2, 'b'), 1);, Unsupported}]}                                                                                                                                          |
|map_entries                |{FAILED, [{SELECT map_entries(map(1, 'a', 2, 'b'));, Unsupported}]}                                                                                                                                                  |
|map_filter                 |{FAILED, [{SELECT map_filter(map(1, 0, 2, 2, 3, -1), (k, v) -> k > v);, Unsupported}]}                                                                                                                               |
|map_from_arrays            |{FAILED, [{SELECT map_from_arrays(array(1.0, 3.0), array('2', '4'));, Unsupported}]}                                                                                                                                 |
|map_from_entries           |{FAILED, [{SELECT map_from_entries(array(struct(1, 'a'), struct(2, 'b')));, Unsupported}]}                                                                                                                           |
|map_keys                   |{FAILED, [{SELECT map_keys(map(1, 'a', 2, 'b'));, Unsupported}]}                                                                                                                                                     |
|map_values                 |{FAILED, [{SELECT map_values(map(1, 'a', 2, 'b'));, Unsupported}]}                                                                                                                                                   |
|map_zip_with               |{FAILED, [{SELECT map_zip_with(map(1, 'a', 2, 'b'), map(1, 'x', 2, 'y'), (k, v1, v2) -> concat(v1, v2));, Unsupported}]}                                                                                             |
|mask                       |{FAILED, [{SELECT mask('abcd-EFGH-8765-4321');, Unsupported}]}                                                                                                                                                       |
|max                        |{FAILED, [{SELECT max(col) FROM VALUES (10), (50), (20) AS tab(col);, Unsupported}]}                                                                                                                                 |
|max_by                     |{FAILED, [{SELECT max_by(x, y) FROM VALUES (('a', 10)), (('b', 50)), (('c', 20)) AS tab(x, y);, Unsupported}]}                                                                                                       |
|md5                        |{PASSED, [{SELECT md5('Spark');, OK}]}                                                                                                                                                                               |
|mean                       |{FAILED, [{SELECT mean(col) FROM VALUES (1), (2), (3) AS tab(col);, Unsupported}]}                                                                                                                                   |
|median                     |{FAILED, [{SELECT median(col) FROM VALUES (0), (10) AS tab(col);, Unsupported}]}                                                                                                                                     |
|min                        |{FAILED, [{SELECT min(col) FROM VALUES (10), (-1), (20) AS tab(col);, Unsupported}]}                                                                                                                                 |
|min_by                     |{FAILED, [{SELECT min_by(x, y) FROM VALUES (('a', 10)), (('b', 50)), (('c', 20)) AS tab(x, y);, Unsupported}]}                                                                                                       |
|minute                     |{FAILED, [{SELECT minute('2009-07-30 12:58:59');, Failed on native side}]}                                                                                                                                           |
|mod                        |{PASSED, [{SELECT 2 % 1.8;, OK}]}                                                                                                                                                                                    |
|mode                       |{FAILED, [{SELECT mode(col) FROM VALUES (0), (10), (10) AS tab(col);, Unsupported}]}                                                                                                                                 |
|monotonically_increasing_id|{FAILED, [{SELECT monotonically_increasing_id();, Unsupported}]}                                                                                                                                                     |
|month                      |{FAILED, [{SELECT month('2016-07-30');, Unsupported}]}                                                                                                                                                               |
|months_between             |{FAILED, [{SELECT months_between('1997-02-28 10:30:00', '1996-10-30');, Unsupported}]}                                                                                                                               |
|named_struct               |{FAILED, [{SELECT named_struct("a", 1, "b", 2, "c", 3);, Unsupported}]}                                                                                                                                              |
|nanvl                      |{FAILED, [{SELECT nanvl(cast('NaN' as double), 123);, Unsupported}]}                                                                                                                                                 |
|negative                   |{PASSED, [{SELECT negative(1);, OK}]}                                                                                                                                                                                |
|next_day                   |{FAILED, [{SELECT next_day('2015-01-14', 'TU');, Unsupported}]}                                                                                                                                                      |
|not                        |{PASSED, [{SELECT not true;, OK}]}                                                                                                                                                                                   |
|now                        |{FAILED, [{SELECT now();, Failed on something else. Check query manually}]}                                                                                                                                          |
|nth_value                  |{FAILED, [{SELECT a, b, nth_value(b, 2) OVER (PARTITION BY a ORDER BY b) FROM VALUES ('A1', 2), ('A1', 1), ('A2', 3), ('A1', 1) tab(a, b);, Unsupported}]}                                                           |
|ntile                      |{FAILED, [{SELECT a, b, ntile(2) OVER (PARTITION BY a ORDER BY b) FROM VALUES ('A1', 2), ('A1', 1), ('A2', 3), ('A1', 1) tab(a, b);, Unsupported}]}                                                                  |
|nullif                     |{PASSED, [{SELECT nullif(2, 2);, OK}]}                                                                                                                                                                               |
|nvl                        |{FAILED, [{SELECT nvl(NULL, array('2'));, Unsupported}]}                                                                                                                                                             |
|nvl2                       |{PASSED, [{SELECT nvl2(NULL, 2, 1);, OK}]}                                                                                                                                                                           |
|octet_length               |{PASSED, [{SELECT octet_length('Spark SQL');, OK}]}                                                                                                                                                                  |
|or                         |{PASSED, [{SELECT true or false;, OK}]}                                                                                                                                                                              |
|overlay                    |{FAILED, [{SELECT overlay('Spark SQL' PLACING '_' FROM 6);, Unsupported}]}                                                                                                                                           |
|parse_url                  |{FAILED, [{SELECT parse_url('http://spark.apache.org/path?query=1', 'HOST');, Unsupported}]}                                                                                                                         |
|percent_rank               |{FAILED, [{SELECT a, b, percent_rank(b) OVER (PARTITION BY a ORDER BY b) FROM VALUES ('A1', 2), ('A1', 1), ('A2', 3), ('A1', 1) tab(a, b);, Unsupported}]}                                                           |
|percentile                 |{FAILED, [{SELECT percentile(col, 0.3) FROM VALUES (0), (10) AS tab(col);, Unsupported}]}                                                                                                                            |
|percentile_approx          |{FAILED, [{SELECT percentile_approx(col, array(0.5, 0.4, 0.1), 100) FROM VALUES (0), (1), (2), (10) AS tab(col);, Unsupported}]}                                                                                     |
|pi                         |{FAILED, [{SELECT pi();, Unsupported}]}                                                                                                                                                                              |
|pmod                       |{FAILED, [{SELECT pmod(10, 3);, Unsupported}]}                                                                                                                                                                       |
|posexplode                 |{FAILED, [{SELECT posexplode(array(10,20));, Unsupported}]}                                                                                                                                                          |
|posexplode_outer           |{FAILED, [{SELECT posexplode_outer(array(10,20));, Unsupported}]}                                                                                                                                                    |
|position                   |{FAILED, [{SELECT position('bar', 'foobarbar');, Unsupported}]}                                                                                                                                                      |
|positive                   |{PASSED, [{SELECT positive(1);, OK}]}                                                                                                                                                                                |
|pow                        |{PASSED, [{SELECT pow(2, 3);, OK}]}                                                                                                                                                                                  |
|power                      |{PASSED, [{SELECT power(2, 3);, OK}]}                                                                                                                                                                                |
|printf                     |{FAILED, [{SELECT printf("Hello World %d %s", 100, "days");, Unsupported}]}                                                                                                                                          |
|quarter                    |{FAILED, [{SELECT quarter('2016-08-31');, Unsupported}]}                                                                                                                                                             |
|radians                    |{FAILED, [{SELECT radians(180);, Unsupported}]}                                                                                                                                                                      |
|raise_error                |{FAILED, [{SELECT raise_error('custom error message');, Unsupported}]}                                                                                                                                               |
|rand                       |{FAILED, [{SELECT rand();, Unsupported}]}                                                                                                                                                                            |
|randn                      |{FAILED, [{SELECT randn();, Unsupported}]}                                                                                                                                                                           |
|random                     |{FAILED, [{SELECT random();, Unsupported}]}                                                                                                                                                                          |
|rank                       |{FAILED, [{SELECT a, b, rank(b) OVER (PARTITION BY a ORDER BY b) FROM VALUES ('A1', 2), ('A1', 1), ('A2', 3), ('A1', 1) tab(a, b);, Unsupported}]}                                                                   |
|reduce                     |{FAILED, [{SELECT reduce(array(1, 2, 3), 0, (acc, x) -> acc + x);, Unsupported}]}                                                                                                                                    |
|reflect                    |{FAILED, [{SELECT reflect('java.util.UUID', 'randomUUID');, Unsupported}]}                                                                                                                                           |
|regexp                     |{FAILED, [{SELECT regexp('%SystemDrive%\Users\John', '%SystemDrive%\\Users.*');, Unsupported}]}                                                                                                                      |
|regexp_count               |{FAILED, [{SELECT regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en');, Unsupported}]}                                                                                                |
|regexp_extract             |{FAILED, [{SELECT regexp_extract('100-200', '(\\d+)-(\\d+)', 1);, Unsupported}]}                                                                                                                                     |
|regexp_extract_all         |{FAILED, [{SELECT regexp_extract_all('100-200, 300-400', '(\\d+)-(\\d+)', 1);, Unsupported}]}                                                                                                                        |
|regexp_instr               |{FAILED, [{SELECT regexp_instr('user@spark.apache.org', '@[^.]*');, Unsupported}]}                                                                                                                                   |
|regexp_like                |{FAILED, [{SELECT regexp_like('%SystemDrive%\Users\John', '%SystemDrive%\\Users.*');, Unsupported}]}                                                                                                                 |
|regexp_replace             |{FAILED, [{SELECT regexp_replace('100-200', '(\\d+)', 'num');, Unsupported}]}                                                                                                                                        |
|regexp_substr              |{FAILED, [{SELECT regexp_substr('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en');, Unsupported}]}                                                                                               |
|regr_avgx                  |{FAILED, [{SELECT regr_avgx(y, x) FROM VALUES (1, 2), (2, 2), (2, 3), (2, 4) AS tab(y, x);, Unsupported}]}                                                                                                           |
|regr_avgy                  |{FAILED, [{SELECT regr_avgy(y, x) FROM VALUES (1, 2), (2, 2), (2, 3), (2, 4) AS tab(y, x);, Unsupported}]}                                                                                                           |
|regr_count                 |{FAILED, [{SELECT regr_count(y, x) FROM VALUES (1, 2), (2, 2), (2, 3), (2, 4) AS tab(y, x);, Unsupported}]}                                                                                                          |
|regr_intercept             |{FAILED, [{SELECT regr_intercept(y, x) FROM VALUES (1,1), (2,2), (3,3) AS tab(y, x);, Unsupported}]}                                                                                                                 |
|regr_r2                    |{FAILED, [{SELECT regr_r2(y, x) FROM VALUES (1, 2), (2, 2), (2, 3), (2, 4) AS tab(y, x);, Unsupported}]}                                                                                                             |
|regr_slope                 |{FAILED, [{SELECT regr_slope(y, x) FROM VALUES (1,1), (2,2), (3,3) AS tab(y, x);, Unsupported}]}                                                                                                                     |
|regr_sxx                   |{FAILED, [{SELECT regr_sxx(y, x) FROM VALUES (1, 2), (2, 2), (2, 3), (2, 4) AS tab(y, x);, Unsupported}]}                                                                                                            |
|regr_sxy                   |{FAILED, [{SELECT regr_sxy(y, x) FROM VALUES (1, 2), (2, 2), (2, 3), (2, 4) AS tab(y, x);, Unsupported}]}                                                                                                            |
|regr_syy                   |{FAILED, [{SELECT regr_syy(y, x) FROM VALUES (1, 2), (2, 2), (2, 3), (2, 4) AS tab(y, x);, Unsupported}]}                                                                                                            |
|repeat                     |{PASSED, [{SELECT repeat('123', 2);, OK}]}                                                                                                                                                                           |
|replace                    |{PASSED, [{SELECT replace('ABCabc', 'abc', 'DEF');, OK}]}                                                                                                                                                            |
|reverse                    |{PASSED, [{SELECT reverse('Spark SQL');, OK}]}                                                                                                                                                                       |
|right                      |{FAILED, [{SELECT right('Spark SQL', 3);, Unsupported}]}                                                                                                                                                             |
|rint                       |{FAILED, [{SELECT rint(12.3456);, Unsupported}]}                                                                                                                                                                     |
|rlike                      |{FAILED, [{SELECT rlike('%SystemDrive%\Users\John', '%SystemDrive%\\Users.*');, Unsupported}]}                                                                                                                       |
|round                      |{PASSED, [{SELECT round(2.5, 0);, OK}]}                                                                                                                                                                              |
|row_number                 |{FAILED, [{SELECT a, b, row_number() OVER (PARTITION BY a ORDER BY b) FROM VALUES ('A1', 2), ('A1', 1), ('A2', 3), ('A1', 1) tab(a, b);, Unsupported}]}                                                              |
|rpad                       |{FAILED, [{SELECT rpad('hi', 5, '??');, Unsupported}]}                                                                                                                                                               |
|rtrim                      |{PASSED, [{SELECT rtrim('    SparkSQL   ');, OK}]}                                                                                                                                                                   |
|schema_of_csv              |{FAILED, [{SELECT schema_of_csv('1,abc');, Unsupported}]}                                                                                                                                                            |
|schema_of_json             |{FAILED, [{SELECT schema_of_json('[{"col":0}]');, Unsupported}]}                                                                                                                                                     |
|sec                        |{FAILED, [{SELECT sec(0);, Unsupported}]}                                                                                                                                                                            |
|second                     |{FAILED, [{SELECT second('2009-07-30 12:58:59');, Failed on native side}]}                                                                                                                                           |
|sentences                  |{FAILED, [{SELECT sentences('Hi there! Good morning.');, Unsupported}]}                                                                                                                                              |
|sequence                   |{FAILED, [{SELECT sequence(1, 5);, Unsupported}]}                                                                                                                                                                    |
|sha                        |{FAILED, [{SELECT sha('Spark');, Unsupported}]}                                                                                                                                                                      |
|sha1                       |{FAILED, [{SELECT sha1('Spark');, Unsupported}]}                                                                                                                                                                     |
|sha2                       |{FAILED, [{SELECT sha2('Spark', 256);, Unsupported}]}                                                                                                                                                                |
|shiftleft                  |{PASSED, [{SELECT shiftleft(2, 1);, OK}]}                                                                                                                                                                            |
|shiftright                 |{PASSED, [{SELECT shiftright(4, 1);, OK}]}                                                                                                                                                                           |
|shiftrightunsigned         |{FAILED, [{SELECT shiftrightunsigned(4, 1);, Unsupported}]}                                                                                                                                                          |
|shuffle                    |{FAILED, [{SELECT shuffle(array(1, 20, 3, 5));, Unsupported}]}                                                                                                                                                       |
|sign                       |{PASSED, [{SELECT sign(40);, OK}]}                                                                                                                                                                                   |
|signum                     |{PASSED, [{SELECT signum(40);, OK}]}                                                                                                                                                                                 |
|sin                        |{PASSED, [{SELECT sin(0);, OK}]}                                                                                                                                                                                     |
|sinh                       |{FAILED, [{SELECT sinh(0);, Unsupported}]}                                                                                                                                                                           |
|size                       |{FAILED, [{SELECT size(array('b', 'd', 'c', 'a'));, Unsupported}]}                                                                                                                                                   |
|skewness                   |{FAILED, [{SELECT skewness(col) FROM VALUES (-10), (-20), (100), (1000) AS tab(col);, Unsupported}]}                                                                                                                 |
|slice                      |{FAILED, [{SELECT slice(array(1, 2, 3, 4), 2, 2);, Unsupported}]}                                                                                                                                                    |
|smallint                   |{SKIPPED, [{, No examples found in spark.sessionState.functionRegistry}]}                                                                                                                                            |
|some                       |{FAILED, [{SELECT some(col) FROM VALUES (true), (false), (false) AS tab(col);, Unsupported}]}                                                                                                                        |
|sort_array                 |{FAILED, [{SELECT sort_array(array('b', 'd', null, 'c', 'a'), true);, Unsupported}]}                                                                                                                                 |
|soundex                    |{FAILED, [{SELECT soundex('Miller');, Unsupported}]}                                                                                                                                                                 |
|space                      |{FAILED, [{SELECT concat(space(2), '1');, Unsupported}]}                                                                                                                                                             |
|spark_partition_id         |{FAILED, [{SELECT spark_partition_id();, Unsupported}]}                                                                                                                                                              |
|split                      |{FAILED, [{SELECT split('oneAtwoBthreeC', '[ABC]');, Unsupported}]}                                                                                                                                                  |
|split_part                 |{FAILED, [{SELECT split_part('11.12.13', '.', 3);, Unsupported}]}                                                                                                                                                    |
|sqrt                       |{PASSED, [{SELECT sqrt(4);, OK}]}                                                                                                                                                                                    |
|stack                      |{FAILED, [{SELECT stack(2, 1, 2, 3);, Unsupported}]}                                                                                                                                                                 |
|startswith                 |{FAILED, [{SELECT startswith('Spark SQL', 'Spark');, Failed on native side}]}                                                                                                                                        |
|std                        |{FAILED, [{SELECT std(col) FROM VALUES (1), (2), (3) AS tab(col);, Unsupported}]}                                                                                                                                    |
|stddev                     |{FAILED, [{SELECT stddev(col) FROM VALUES (1), (2), (3) AS tab(col);, Unsupported}]}                                                                                                                                 |
|stddev_pop                 |{FAILED, [{SELECT stddev_pop(col) FROM VALUES (1), (2), (3) AS tab(col);, Unsupported}]}                                                                                                                             |
|stddev_samp                |{FAILED, [{SELECT stddev_samp(col) FROM VALUES (1), (2), (3) AS tab(col);, Unsupported}]}                                                                                                                            |
|str_to_map                 |{FAILED, [{SELECT str_to_map('a:1,b:2,c:3', ',', ':');, Unsupported}]}                                                                                                                                               |
|string                     |{SKIPPED, [{, No examples found in spark.sessionState.functionRegistry}]}                                                                                                                                            |
|struct                     |{FAILED, [{SELECT struct(1, 2, 3);, Unsupported}]}                                                                                                                                                                   |
|substr                     |{FAILED, [{SELECT substr('Spark SQL', 5);, Failed on native side}]}                                                                                                                                                  |
|substring                  |{FAILED, [{SELECT substring('Spark SQL', 5);, Failed on native side}]}                                                                                                                                               |
|substring_index            |{FAILED, [{SELECT substring_index('www.apache.org', '.', 2);, Unsupported}]}                                                                                                                                         |
|sum                        |{FAILED, [{SELECT sum(col) FROM VALUES (5), (10), (15) AS tab(col);, Unsupported}]}                                                                                                                                  |
|tan                        |{PASSED, [{SELECT tan(0);, OK}]}                                                                                                                                                                                     |
|tanh                       |{FAILED, [{SELECT tanh(0);, Unsupported}]}                                                                                                                                                                           |
|timestamp                  |{SKIPPED, [{, No examples found in spark.sessionState.functionRegistry}]}                                                                                                                                            |
|timestamp_micros           |{FAILED, [{SELECT timestamp_micros(1230219000123123);, Unsupported}]}                                                                                                                                                |
|timestamp_millis           |{FAILED, [{SELECT timestamp_millis(1230219000123);, Unsupported}]}                                                                                                                                                   |
|timestamp_seconds          |{FAILED, [{SELECT timestamp_seconds(1230219000);, Unsupported}]}                                                                                                                                                     |
|tinyint                    |{SKIPPED, [{, No examples found in spark.sessionState.functionRegistry}]}                                                                                                                                            |
|to_binary                  |{FAILED, [{SELECT to_binary('abc', 'utf-8');, Unsupported}]}                                                                                                                                                         |
|to_char                    |{FAILED, [{SELECT to_char(454, '999');, Unsupported}]}                                                                                                                                                               |
|to_csv                     |{FAILED, [{SELECT to_csv(named_struct('a', 1, 'b', 2));, Unsupported}]}                                                                                                                                              |
|to_date                    |{PASSED, [{SELECT to_date('2009-07-30 04:17:52');, OK}]}                                                                                                                                                             |
|to_json                    |{FAILED, [{SELECT to_json(named_struct('a', 1, 'b', 2));, Unsupported}]}                                                                                                                                             |
|to_number                  |{FAILED, [{SELECT to_number('454', '999');, Unsupported}]}                                                                                                                                                           |
|to_timestamp               |{PASSED, [{SELECT to_timestamp('2016-12-31 00:12:00');, OK}]}                                                                                                                                                        |
|to_timestamp_ltz           |{PASSED, [{SELECT to_timestamp_ltz('2016-12-31 00:12:00');, OK}]}                                                                                                                                                    |
|to_timestamp_ntz           |{FAILED, [{SELECT to_timestamp_ntz('2016-12-31 00:12:00');, Failed on native side}]}                                                                                                                                 |
|to_unix_timestamp          |{FAILED, [{SELECT to_unix_timestamp('2016-04-08', 'yyyy-MM-dd');, Unsupported}]}                                                                                                                                     |
|to_utc_timestamp           |{FAILED, [{SELECT to_utc_timestamp('2016-08-31', 'Asia/Seoul');, Unsupported}]}                                                                                                                                      |
|transform                  |{FAILED, [{SELECT transform(array(1, 2, 3), x -> x + 1);, Unsupported}]}                                                                                                                                             |
|transform_keys             |{FAILED, [{SELECT transform_keys(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), (k, v) -> k + 1);, Unsupported}]}                                                                                                  |
|transform_values           |{FAILED, [{SELECT transform_values(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), (k, v) -> v + 1);, Unsupported}]}                                                                                                |
|translate                  |{PASSED, [{SELECT translate('AaBbCc', 'abc', '123');, OK}]}                                                                                                                                                          |
|trim                       |{PASSED, [{SELECT trim('    SparkSQL   ');, OK}]}                                                                                                                                                                    |
|trunc                      |{FAILED, [{SELECT trunc('2019-08-04', 'week');, Failed on native side}]}                                                                                                                                             |
|try_add                    |{PASSED, [{SELECT try_add(1, 2);, OK}]}                                                                                                                                                                              |
|try_avg                    |{FAILED, [{SELECT try_avg(col) FROM VALUES (1), (2), (3) AS tab(col);, Unsupported}]}                                                                                                                                |
|try_divide                 |{PASSED, [{SELECT try_divide(3, 2);, OK}]}                                                                                                                                                                           |
|try_element_at             |{FAILED, [{SELECT try_element_at(array(1, 2, 3), 2);, Unsupported}]}                                                                                                                                                 |
|try_multiply               |{PASSED, [{SELECT try_multiply(2, 3);, OK}]}                                                                                                                                                                         |
|try_subtract               |{PASSED, [{SELECT try_subtract(2, 1);, OK}]}                                                                                                                                                                         |
|try_sum                    |{FAILED, [{SELECT try_sum(col) FROM VALUES (5), (10), (15) AS tab(col);, Unsupported}]}                                                                                                                              |
|try_to_binary              |{FAILED, [{SELECT try_to_binary('abc', 'utf-8');, Unsupported}]}                                                                                                                                                     |
|try_to_number              |{FAILED, [{SELECT try_to_number('454', '999');, Unsupported}]}                                                                                                                                                       |
|try_to_timestamp           |{PASSED, [{SELECT try_to_timestamp('2016-12-31 00:12:00');, OK}]}                                                                                                                                                    |
|typeof                     |{FAILED, [{SELECT typeof(1);, Unsupported}]}                                                                                                                                                                         |
|ucase                      |{PASSED, [{SELECT ucase('SparkSql');, OK}]}                                                                                                                                                                          |
|unbase64                   |{FAILED, [{SELECT unbase64('U3BhcmsgU1FM');, Unsupported}]}                                                                                                                                                          |
|unhex                      |{FAILED, [{SELECT decode(unhex('537061726B2053514C'), 'UTF-8');, Unsupported}]}                                                                                                                                      |
|unix_date                  |{FAILED, [{SELECT unix_date(DATE("1970-01-02"));, Unsupported}]}                                                                                                                                                     |
|unix_micros                |{FAILED, [{SELECT unix_micros(TIMESTAMP('1970-01-01 00:00:01Z'));, Unsupported}]}                                                                                                                                    |
|unix_millis                |{FAILED, [{SELECT unix_millis(TIMESTAMP('1970-01-01 00:00:01Z'));, Unsupported}]}                                                                                                                                    |
|unix_seconds               |{FAILED, [{SELECT unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z'));, Unsupported}]}                                                                                                                                   |
|unix_timestamp             |{FAILED, [{SELECT unix_timestamp();, Unsupported}]}                                                                                                                                                                  |
|upper                      |{PASSED, [{SELECT upper('SparkSql');, OK}]}                                                                                                                                                                          |
|url_decode                 |{FAILED, [{SELECT url_decode('https%3A%2F%2Fspark.apache.org');, Unsupported}]}                                                                                                                                      |
|url_encode                 |{FAILED, [{SELECT url_encode('https://spark.apache.org');, Unsupported}]}                                                                                                                                            |
|user                       |{PASSED, [{SELECT user();, OK}]}                                                                                                                                                                                     |
|uuid                       |{FAILED, [{SELECT uuid();, Unsupported}]}                                                                                                                                                                            |
|var_pop                    |{FAILED, [{SELECT var_pop(col) FROM VALUES (1), (2), (3) AS tab(col);, Unsupported}]}                                                                                                                                |
|var_samp                   |{FAILED, [{SELECT var_samp(col) FROM VALUES (1), (2), (3) AS tab(col);, Unsupported}]}                                                                                                                               |
|variance                   |{FAILED, [{SELECT variance(col) FROM VALUES (1), (2), (3) AS tab(col);, Unsupported}]}                                                                                                                               |
|version                    |{FAILED, [{SELECT version();, Unsupported}]}                                                                                                                                                                         |
|weekday                    |{FAILED, [{SELECT weekday('2009-07-30');, Unsupported}]}                                                                                                                                                             |
|weekofyear                 |{FAILED, [{SELECT weekofyear('2008-02-20');, Unsupported}]}                                                                                                                                                          |
|when                       |{PASSED, [{SELECT CASE WHEN 1 > 0 THEN 1 WHEN 2 > 0 THEN 2.0 ELSE 1.2 END;, OK}]}                                                                                                                                    |
|width_bucket               |{FAILED, [{SELECT width_bucket(5.3, 0.2, 10.6, 5);, Unsupported}]}                                                                                                                                                   |
|xpath                      |{FAILED, [{SELECT xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>','a/b/text()');, Unsupported}]}                                                                                                        |
|xpath_boolean              |{FAILED, [{SELECT xpath_boolean('<a><b>1</b></a>','a/b');, Unsupported}]}                                                                                                                                            |
|xpath_double               |{FAILED, [{SELECT xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)');, Unsupported}]}                                                                                                                               |
|xpath_float                |{FAILED, [{SELECT xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)');, Unsupported}]}                                                                                                                                |
|xpath_int                  |{FAILED, [{SELECT xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)');, Unsupported}]}                                                                                                                                  |
|xpath_long                 |{FAILED, [{SELECT xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)');, Unsupported}]}                                                                                                                                 |
|xpath_number               |{FAILED, [{SELECT xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)');, Unsupported}]}                                                                                                                               |
|xpath_short                |{FAILED, [{SELECT xpath_short('<a><b>1</b><b>2</b></a>', 'sum(a/b)');, Unsupported}]}                                                                                                                                |
|xpath_string               |{FAILED, [{SELECT xpath_string('<a><b>b</b><c>cc</c></a>','a/c');, Unsupported}]}                                                                                                                                    |
|xxhash64                   |{FAILED, [{SELECT xxhash64('Spark', array(123), 2);, Unsupported}]}                                                                                                                                                  |
|year                       |{PASSED, [{SELECT year('2016-07-30');, OK}]}                                                                                                                                                                         |
|zip_with                   |{FAILED, [{SELECT zip_with(array(1, 2, 3), array('a', 'b', 'c'), (x, y) -> (y, x));, Unsupported}]}                                                                                                                  |
||                          |{PASSED, [{SELECT 3 | 5;, OK}]}                                                                                                                                                                                      |
|~                          |{FAILED, [{SELECT ~ 0;, Failed on native side}]}                                                                                                                                                                     |
+---------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
